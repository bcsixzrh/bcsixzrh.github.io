(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{478:function(a,t,s){"use strict";s.r(t);var e=s(4),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("blockquote",[s("p",[a._v("记一次面试经历")])]),a._v(" "),s("h2",{attrs:{id:"hashmap的put过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的put过程"}},[a._v("#")]),a._v(" Hashmap的put过程")]),a._v(" "),s("ul",[s("li",[a._v("计算index的过程")]),a._v(" "),s("li",[a._v("hash碰撞时数据的插入方式")]),a._v(" "),s("li",[a._v("超出临界值的resize的过程")]),a._v(" "),s("li",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI3NzE0NjcwMg==&mid=2650122054&idx=1&sn=46232fcf7db52e460f1ed0230da1584c&chksm=f36bba67c41c3371a05a85b1a00761418e4b80bde8c69275bab8beed081d011a0acfa66e5f5f&mpshare=1&scene=1&srcid=0606CwSlGlLsMLRHkZauSna8&sharer_sharetime=1591434732293&sharer_shareid=6cd22e691a4642f12b7e862164b93402&key=692de84b3835f8ab3dfcc62057d270a28d3198228c1d096b725445e3845a6e489538910e5b2dd8a97d0486ff1a799e68acb99617b05cd186163e818781e4c4276275ade2ab8cd57fa95ad24ac511c379&ascene=1&uin=MTQ1NzYyMzcwMA%3D%3D&devicetype=Windows+10+x64&version=62090070&lang=zh_CN&exportkey=ATCjPeFWAReDF3FL8Ivor4k%3D&pass_ticket=bu8yAQsNXsgQoRtj1GVw%2B9ykl6awWa6ONCncak6EGu2tsPCUZDEE%2B%2FyIfNyHhFjg",target:"_blank",rel:"noopener noreferrer"}},[a._v("参考链接"),s("OutboundLink")],1)])]),a._v(" "),s("h2",{attrs:{id:"hashmap的key到下标的计算方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的key到下标的计算方式"}},[a._v("#")]),a._v(" Hashmap的key到下标的计算方式")]),a._v(" "),s("ul",[s("li",[a._v("hashcode"),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("key "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("h "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hashCode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("^")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("h "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])])]),a._v(" "),s("li",[a._v("容量取模")]),a._v(" "),s("li",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI3NzE0NjcwMg==&mid=2650120877&idx=1&sn=401bb7094d41918f1a6e142b6c66aaac&chksm=f36bbf8cc41c369aa44c319942b06ca0f119758b22e410e8f705ba56b9ac6d4042fe686dbed4&mpshare=1&scene=1&srcid=06060anvsOsXPh32wr45XCN7&sharer_sharetime=1591433267804&sharer_shareid=6cd22e691a4642f12b7e862164b93402&key=d9abbbe4b9a3fb837ce2491ba35f1df8c64760c302b5b529d9d85f16dc035e886ff6bc99b9e08bc0a40aa116b65b7a42c50926dee02172b95872b65785fea53baf508e50aeb679db9153ee607f29c58a&ascene=1&uin=MTQ1NzYyMzcwMA%3D%3D&devicetype=Windows+10+x64&version=62090070&lang=zh_CN&exportkey=AVWsJ9sEp8uUE9Qhs727wBA%3D&pass_ticket=bu8yAQsNXsgQoRtj1GVw%2B9ykl6awWa6ONCncak6EGu2tsPCUZDEE%2B%2FyIfNyHhFjg",target:"_blank",rel:"noopener noreferrer"}},[a._v("hash方法详解"),s("OutboundLink")],1)])]),a._v(" "),s("h2",{attrs:{id:"hashmap的数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的数据结构"}},[a._v("#")]),a._v(" Hashmap的数据结构")]),a._v(" "),s("ul",[s("li",[a._v("数组+链表(大于8则是红黑树)")])]),a._v(" "),s("h2",{attrs:{id:"hashmap发生hash碰撞后数据是插入头节点还是尾节点-为什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap发生hash碰撞后数据是插入头节点还是尾节点-为什么"}},[a._v("#")]),a._v(" Hashmap发生hash碰撞后数据是插入头节点还是尾节点,为什么")]),a._v(" "),s("ul",[s("li",[a._v("JDK8以前是头插法，JDK8后是尾插法")]),a._v(" "),s("li",[a._v("因为头插法会造成死链(并发)")]),a._v(" "),s("li",[a._v("JDK7用头插是考虑到了一个所谓的热点数据的点(新插入的数据可能会更早用到)，但这其实是个伪命题,因为JDK7中扩容 rehash的时候，旧链表迁移新链表的时候，如果在新表的数组索引位置相同，则链表元素会倒置(就是因为头插) 所以最后的结果 还是打乱了插入的顺序 所以总的来看支撑JDK7使用头插的这点原因也不足以支撑下去了 所以就干脆换成尾插 一举多得")]),a._v(" "),s("li",[a._v("hashmap用数组+链表。数组是固定长度，链表太长就需要扩充数组长度进行rehash减少链表长度。如果两个线程同时触发扩容，在移动节点时会导致一个链表中的2个节点相互引用，从而生成环链表")])]),a._v(" "),s("h2",{attrs:{id:"concurrenthashmap-是怎么实现线程安全的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-是怎么实现线程安全的"}},[a._v("#")]),a._v(" ConcurrentHashMap 是怎么实现线程安全的")]),a._v(" "),s("ul",[s("li",[a._v("volatile ,cas, 锁(RenntrantLock/synchronized)")])]),a._v(" "),s("h2",{attrs:{id:"synchronized-和-lock-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-和-lock-的区别"}},[a._v("#")]),a._v(" synchronized 和 Lock 的区别")]),a._v(" "),s("h2",{attrs:{id:"renntrantlock-特性-公平锁和非公平锁的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#renntrantlock-特性-公平锁和非公平锁的实现"}},[a._v("#")]),a._v(" RenntrantLock 特性, 公平锁和非公平锁的实现")]),a._v(" "),s("h2",{attrs:{id:"renntrantlock-介绍-怎么实现可重入的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#renntrantlock-介绍-怎么实现可重入的"}},[a._v("#")]),a._v(" RenntrantLock 介绍,怎么实现可重入的")]),a._v(" "),s("h2",{attrs:{id:"jdk8-的-concurrenthashmap-为什么用-synchronized-代替了renntrantlock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk8-的-concurrenthashmap-为什么用-synchronized-代替了renntrantlock"}},[a._v("#")]),a._v(" JDK8 的 ConcurrentHashMap 为什么用  synchronized 代替了RenntrantLock")]),a._v(" "),s("p",[a._v("​    synchronized 在put 发生hash碰撞时锁定链表的第一个Node()")]),a._v(" "),s("ul",[s("li",[a._v("减少内存开销(主要)\n假设使用可重入锁来获得同步支持，那么每个节点都需要通过继承AQS来获得同步支持。但并不是每个节点都需要获得同步支持的，只有链表的头节点（红黑树的根节点）需要同步，这无疑带来了巨大内存浪费。")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("获得JVM的支持\n可重入锁毕竟是API这个级别的，后续的性能优化空间很小。\nsynchronized则是JVM直接支持的，JVM能够在运行时作出相应的优化措施：锁粗化、锁消除、锁自旋等等。这就使得synchronized能够随着JDK版本的升级而不改动代码的前提下获得性能上的提升。")])]),a._v(" "),s("h2",{attrs:{id:"gc-展开"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc-展开"}},[a._v("#")]),a._v(" GC 展开")]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"http-请求类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-请求类型"}},[a._v("#")]),a._v(" HTTP 请求类型")]),a._v(" "),s("h2",{attrs:{id:"http-状态码-3开头代表啥意思"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-状态码-3开头代表啥意思"}},[a._v("#")]),a._v(" HTTP 状态码,3开头代表啥意思")]),a._v(" "),s("h2",{attrs:{id:"为什么存在跨域问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么存在跨域问题"}},[a._v("#")]),a._v(" 为什么存在跨域问题")]),a._v(" "),s("h2",{attrs:{id:"跨域的解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨域的解决方案"}},[a._v("#")]),a._v(" 跨域的解决方案")]),a._v(" "),s("ul",[s("li",[a._v("jsonp")]),a._v(" "),s("li",[a._v("nginx 代理")]),a._v(" "),s("li",[a._v("cors")])]),a._v(" "),s("h2",{attrs:{id:"jsonp的实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsonp的实现原理"}},[a._v("#")]),a._v(" jsonp的实现原理")]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"spring-实现的设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-实现的设计模式"}},[a._v("#")]),a._v(" Spring 实现的设计模式")]),a._v(" "),s("ul",[s("li",[a._v("IOC,DI")]),a._v(" "),s("li",[a._v("工厂设计模式")]),a._v(" "),s("li",[a._v("单例设计模式")]),a._v(" "),s("li",[a._v("代理设计模式")]),a._v(" "),s("li",[a._v("模板方法 xxxTemplate")]),a._v(" "),s("li",[a._v("观察者模式 ApplicationEvent,ApplicationListener")]),a._v(" "),s("li",[a._v("适配器模式 HandlerAdapter 适配 不同的controller 到 handler")]),a._v(" "),s("li",[a._v("装饰者模式 InputStream,Wrapperxxx, Decoratorxxx")])]),a._v(" "),s("h2",{attrs:{id:"spring-哪里用到了-责任链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-哪里用到了-责任链"}},[a._v("#")]),a._v(" Spring 哪里用到了 责任链")]),a._v(" "),s("h2",{attrs:{id:"过滤器和拦截器的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过滤器和拦截器的区别"}},[a._v("#")]),a._v(" 过滤器和拦截器的区别")]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"集群和分布式的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集群和分布式的区别"}},[a._v("#")]),a._v(" 集群和分布式的区别")]),a._v(" "),s("h2",{attrs:{id:"微服务的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微服务的概念"}},[a._v("#")]),a._v(" 微服务的概念")]),a._v(" "),s("h2",{attrs:{id:"微服务的带来的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微服务的带来的问题"}},[a._v("#")]),a._v(" 微服务的带来的问题")]),a._v(" "),s("h2",{attrs:{id:"zuul-和-gateway-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zuul-和-gateway-的区别"}},[a._v("#")]),a._v(" zuul 和 Gateway 的区别")]),a._v(" "),s("h2",{attrs:{id:"分布式事务的解决方案-seata的实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务的解决方案-seata的实现原理"}},[a._v("#")]),a._v(" 分布式事务的解决方案, Seata的实现原理")]),a._v(" "),s("h2",{attrs:{id:"redis-分布式锁的实现-setnx-set-if-no-exit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-分布式锁的实现-setnx-set-if-no-exit"}},[a._v("#")]),a._v(" redis 分布式锁的实现 setnx(set if no exit)")]),a._v(" "),s("h2",{attrs:{id:"redis-redision-实现-lua-脚本的原子性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-redision-实现-lua-脚本的原子性"}},[a._v("#")]),a._v(" redis  redision 实现(lua 脚本的原子性)")]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"mysql-b-tree-和-mongodb的-b-tree-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql-b-tree-和-mongodb的-b-tree-的区别"}},[a._v("#")]),a._v(" mysql b+ tree 和 mongoDB的 b tree 的区别")]),a._v(" "),s("h2",{attrs:{id:"注册中心加-负载均衡实现灰度调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注册中心加-负载均衡实现灰度调用"}},[a._v("#")]),a._v(" 注册中心加 负载均衡实现灰度调用")]),a._v(" "),s("h2",{attrs:{id:"rabbmitmq-的exchange-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rabbmitmq-的exchange-类型"}},[a._v("#")]),a._v(" RabbmitMQ 的exchange 类型")]),a._v(" "),s("p",[a._v("消息流程 Producer > Broker[Exchange> Queues] > Consumer")]),a._v(" "),s("ul",[s("li",[a._v("direct (routingkey相同)")]),a._v(" "),s("li",[a._v("topic (routingkey 支持通配符 *,#)")]),a._v(" "),s("li",[a._v("fanout (全部Queues)")]),a._v(" "),s("li",[a._v("header (消息头 参数路由)")])]),a._v(" "),s("h2",{attrs:{id:"redis-binlog-skiplist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-binlog-skiplist"}},[a._v("#")]),a._v(" redis binlog, skipList")]),a._v(" "),s("hr")])}),[],!1,null,null,null);t.default=r.exports}}]);