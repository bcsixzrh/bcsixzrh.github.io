(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{482:function(e,t,a){"use strict";a.r(t);var r=a(4),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"java-lang-reflect-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-reflect-type"}},[e._v("#")]),e._v(" java.lang.reflect.Type")]),e._v(" "),a("h2",{attrs:{id:"default-string-gettypename-return-tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#default-string-gettypename-return-tostring"}},[e._v("#")]),e._v(" default String getTypeName() {"),a("br"),e._v("        return toString();"),a("br"),e._v("    }")]),e._v(" "),a("h2",{attrs:{id:"parameterizedtype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parameterizedtype"}},[e._v("#")]),e._v(" ParameterizedType")]),e._v(" "),a("h2",{attrs:{id:"typevariable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typevariable"}},[e._v("#")]),e._v(" TypeVariable")]),e._v(" "),a("h3",{attrs:{id:"genericdeclaration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#genericdeclaration"}},[e._v("#")]),e._v(" GenericDeclaration")]),e._v(" "),a("h4",{attrs:{id:"定义在哪里使用泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义在哪里使用泛型"}},[e._v("#")]),e._v(" 定义在哪里使用泛型")]),e._v(" "),a("h5",{attrs:{id:"实现类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现类"}},[e._v("#")]),e._v(" 实现类")]),e._v(" "),a("h6",{attrs:{id:"_1-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-method"}},[e._v("#")]),e._v(" 1. Method")]),e._v(" "),a("h6",{attrs:{id:"_2-constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-constructor"}},[e._v("#")]),e._v(" 2. Constructor")]),e._v(" "),a("h6",{attrs:{id:"_3-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-class"}},[e._v("#")]),e._v(" 3. Class")]),e._v(" "),a("h6",{attrs:{id:"_4-我们只能在方法（包括普通方法跟构造方法）以及类上申明泛型。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-我们只能在方法（包括普通方法跟构造方法）以及类上申明泛型。"}},[e._v("#")]),e._v(" 4. 我们只能在方法（包括普通方法跟构造方法）以及类上申明泛型。")]),e._v(" "),a("h4",{attrs:{id:"type-getbounds-获取泛型的边界-实际只有上边界"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-getbounds-获取泛型的边界-实际只有上边界"}},[e._v("#")]),e._v(" Type[] getBounds();"),a("br"),e._v("获取泛型的边界;实际只有上边界;")]),e._v(" "),a("h4",{attrs:{id:"d-getgenericdeclaration-返回泛型申明时所在的类或者方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#d-getgenericdeclaration-返回泛型申明时所在的类或者方法"}},[e._v("#")]),e._v(" D getGenericDeclaration();"),a("br"),e._v("返回泛型申明时所在的类或者方法")]),e._v(" "),a("h4",{attrs:{id:"string-getname-返回类型变量的名称"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-getname-返回类型变量的名称"}},[e._v("#")]),e._v(" String getName();"),a("br"),e._v("返回类型变量的名称")]),e._v(" "),a("h4",{attrs:{id:"getannotatedbounds-此方法返回一个annotatedtype类型的数组，获取的是我们在类型变量的上界。不同于getbounds-方法的是，这个方法可以获取到边界上添加的注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getannotatedbounds-此方法返回一个annotatedtype类型的数组，获取的是我们在类型变量的上界。不同于getbounds-方法的是，这个方法可以获取到边界上添加的注解"}},[e._v("#")]),e._v(" getAnnotatedBounds();"),a("br"),e._v("此方法返回一个AnnotatedType类型的数组，获取的是我们在类型变量的上界。"),a("br"),e._v("不同于getBounds()方法的是，这个方法可以获取到边界上添加的注解")]),e._v(" "),a("h2",{attrs:{id:"genericarraytype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#genericarraytype"}},[e._v("#")]),e._v(" GenericArrayType")]),e._v(" "),a("h3",{attrs:{id:"type-getgenericcomponenttype-返回数组中元素的类型，typevariable或者parameterizedtype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-getgenericcomponenttype-返回数组中元素的类型，typevariable或者parameterizedtype"}},[e._v("#")]),e._v(" Type getGenericComponentType();"),a("br"),e._v("返回数组中元素的类型，TypeVariable或者ParameterizedType")]),e._v(" "),a("h3",{attrs:{id:"泛型数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型数组"}},[e._v("#")]),e._v(" 泛型数组")]),e._v(" "),a("h2",{attrs:{id:"wildcardtype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wildcardtype"}},[e._v("#")]),e._v(" WildcardType")]),e._v(" "),a("h3",{attrs:{id:"处理泛型中的通配符such-as-extends-number-or-super-integer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理泛型中的通配符such-as-extends-number-or-super-integer"}},[e._v("#")]),e._v(" 处理泛型中的通配符"),a("br"),e._v("such as ?, ? extends Number, or ? super Integer.")]),e._v(" "),a("h3",{attrs:{id:"获取通配符表达式的上界-type-getupperbounds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取通配符表达式的上界-type-getupperbounds"}},[e._v("#")]),e._v(" // 获取通配符表达式的上界"),a("br"),e._v("    Type[] getUpperBounds();")]),e._v(" "),a("h3",{attrs:{id:"获取通配符表达式的下界-type-getlowerbounds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取通配符表达式的下界-type-getlowerbounds"}},[e._v("#")]),e._v(" // 获取通配符表达式的下界"),a("br"),e._v("    Type[] getLowerBounds();")]),e._v(" "),a("h2",{attrs:{id:"resolvabletype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resolvabletype"}},[e._v("#")]),e._v(" ResolvableType")]),e._v(" "),a("h3",{attrs:{id:"spring-提供的泛型工具类-封装的所有的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-提供的泛型工具类-封装的所有的类型"}},[e._v("#")]),e._v(" Spring 提供的泛型工具类,封装的所有的类型")]),e._v(" "),a("h3",{attrs:{id:"generictyperesolver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generictyperesolver"}},[e._v("#")]),e._v(" GenericTypeResolver")]),e._v(" "),a("blockquote",[a("p",[e._v("后续会更新源码分析系列文章 as: spring core 代码阅读的系列文章 和 jvm 系列文章")])])])}),[],!1,null,null,null);t.default=s.exports}}]);